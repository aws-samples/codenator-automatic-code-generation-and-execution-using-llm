AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates the infrastructure required to deploy Codenator
Parameters:
  ProjectName:
    AllowedPattern: '[A-Za-z0-9-]{1,16}'
    ConstraintDescription: >-
      Maximum of 22 alphanumeric characters. Can include hyphens (-), but not
      spaces. Must be unique within your account in an AWS Region.
    Description: Project Name used to identify your resources
    MaxLength: '16'
    MinLength: '1'
    Type: String
    Default: codenator
  VpcCIDR:
    Type: String
    Default: 10.2.0.0/16
  PublicSubnetCIDRA:
    Type: String
    Default: 10.2.0.0/24
  PrivateSubnetCIDRA:
    Type: String
    Default: 10.2.2.0/24
  PublicSubnetCIDRB:
    Type: String
    Default: 10.2.3.0/24
  PrivateSubnetCIDRB:
    Type: String
    Default: 10.2.1.0/24
  ProjectBucket:
    Type: String
    Default: codenator-dev-00
  AppPort:
    Type: String
    Default: 8080
  ProjectPrefix:
    Type: String
    Default: codenator/CFN/
  PromptStoreTableName:
    Type: String
    Default: "prompt-store"
  APILayerTableName:
    Type: String
    Default: "model-db"
  Certificate:
    Type: String
    # Update with the certificate ARN from Certificate Manager, which must exist in the same region.
    Default: 'arn:aws:acm:region:123456789012:certificate/00000000-0000-0000-0000-000000000000'
Resources:
  VPCStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectPrefix, 'vpc-template.yaml']]
      Parameters:
        ProjectName: !Ref ProjectName
        VpcCIDR: !Ref VpcCIDR
        PublicSubnetCIDRA: !Ref PublicSubnetCIDRA
        PrivateSubnetCIDRA: !Ref PrivateSubnetCIDRA
        PublicSubnetCIDRB: !Ref PublicSubnetCIDRB
        PrivateSubnetCIDRB: !Ref PrivateSubnetCIDRB
        AppPort: !Ref AppPort
  IAMStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectPrefix, 'iam-template.yaml']]
      Parameters:
        ProjectName: !Ref ProjectName
  PromptStoreStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:  !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectPrefix, 'prompt-store.yaml']]
      Parameters:
        DataBucket: !Ref ProjectBucket
        TableName: !Ref PromptStoreTableName
  ModelDBStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:  !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectPrefix, 'model-db.yaml']]
      Parameters:
        DataBucket: !Ref ProjectBucket
        TableName: !Ref APILayerTableName
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref ProjectName, Cluster]]
  APILayerService:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectPrefix, 'api-layer.yaml']]
      Parameters:
        ProjectName: !Ref ProjectName
        VPC: !GetAtt VPCStack.Outputs.VpcID
        PrivateSubnetA: !GetAtt VPCStack.Outputs.PrivateSubnetA
        PrivateSubnetB: !GetAtt VPCStack.Outputs.PrivateSubnetB
        AppName: api-layer
        AppPort: !Ref AppPort
        DDBTableName: !Ref APILayerTableName
        ECSCluster: !Ref Cluster
        ExecutionRoleArn: !GetAtt IAMStack.Outputs.ECSExecutionRole
        TaskRoleArn: !GetAtt IAMStack.Outputs.APILayerTaskRole
        APILayerSG: !GetAtt VPCStack.Outputs.AppSecurityGroup
        LoadBalancerSecurityGroup: !GetAtt VPCStack.Outputs.LoadBalancerSecurityGroup
  