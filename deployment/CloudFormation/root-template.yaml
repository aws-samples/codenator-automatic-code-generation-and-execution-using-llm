AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates the infrastructure required to deploy Codenator
Parameters:
  ProjectName:
    AllowedPattern: '[A-Za-z0-9-]{1,16}'
    ConstraintDescription: >-
      Maximum of 22 alphanumeric characters. Can include hyphens (-), but not
      spaces. Must be unique within your account in an AWS Region.
    Description: Project Name used to identify your resources
    MaxLength: '16'
    MinLength: '1'
    Type: String
    Default: codenator
  VpcCIDR:
    Type: String
    Default: 10.2.0.0/16
    Description: Project VPC CIDR Range
  PublicSubnetCIDRA:
    Type: String
    Default: 10.2.0.0/24
  PrivateSubnetCIDRA:
    Type: String
    Default: 10.2.2.0/24
  PublicSubnetCIDRB:
    Type: String
    Default: 10.2.3.0/24
  PrivateSubnetCIDRB:
    Type: String
    Default: 10.2.1.0/24
  InternalAppPort:
    Type: Number
    Default: 8080
    Description: Internal application communication port
  ALBPort:
    Type: Number
    Default: 443
    Description: Application internet facing communication port
  ALBSourceIP:
    Type: String 
    Description: Source IP or CIDR range that can access the application. Restrict to your machine public IP for better security.
    Deafult: 0.0.0.0/0
  ProjectBucket:
    Type: String
    Default: my-codenator-bucket
    Description: Project bucket
  ProjectCFNPrefix:
    Type: String
    Default: codenator/CFN/
    Description: Prefix to the project's CloudFormation templates
  ProjectConvPrefix:
    Type: String
    Default: codenator/conv/
    Description: Prefix to the project's coversation logs
  ProjectFeedbackPrefix:
    Type: String
    Default: codenator/feedback/
    Description: Prefix to the project's feedback logs
  PromptStoreTableName:
    Type: String
    Default: "prompt-store"
    Description: Prompt Store DynamoDB table name
  ModelDBTableName:
    Type: String
    Default: "model-db"
    Description: Model metadata database DynamoDB table name
  Certificate:
    Type: String
    # Update with the certificate ARN from Certificate Manager, which must exist in the same region.
    Default: 'arn:aws:acm:region:123456789012:certificate/00000000-0000-0000-0000-000000000000'
    Description: SSL/TLS certificates ARN from Certificate Manager, which must exist in the same region.
Resources:
  VPCStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectCFNPrefix, 'vpc-template.yaml']]
      Parameters:
        ProjectName: !Ref ProjectName
        VpcCIDR: !Ref VpcCIDR
        PublicSubnetCIDRA: !Ref PublicSubnetCIDRA
        PrivateSubnetCIDRA: !Ref PrivateSubnetCIDRA
        PublicSubnetCIDRB: !Ref PublicSubnetCIDRB
        PrivateSubnetCIDRB: !Ref PrivateSubnetCIDRB
        AppPort: !Ref InternalAppPort
        ALBPort: !Ref ALBPort
        AppSourceIP: !Ref ALBSourceIP
  IAMStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectCFNPrefix, 'iam-template.yaml']]
      Parameters:
        ProjectName: !Ref ProjectName
        KMSKeyArn: !GetAtt KMSKey.Arn
        ModelDBArn: !GetAtt ModelDBStack.Outputs.DDBTableArn
        PromptStoreArn: !GetAtt PromptStoreStack.Outputs.DDBTableArn
        ProjectBucket: !Ref ProjectBucket
        ProjectConvPrefix: !Ref ProjectConvPrefix
        ProjectFeedbackPrefix: !Ref ProjectFeedbackPrefix
  PromptStoreStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:  !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectCFNPrefix, 'prompt-store.yaml']]
      Parameters:
        DataBucket: !Ref ProjectBucket
        TableName: !Ref PromptStoreTableName
  ModelDBStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:  !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectCFNPrefix, 'model-db.yaml']]
      Parameters:
        DataBucket: !Ref ProjectBucket
        TableName: !Ref ModelDBTableName
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref ProjectName, Cluster]]
  KMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: symmetric encryption KMS key for code executor
      EnableKeyRotation: false
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join ['',['arn:aws:iam::', !Ref AWS::AccountId, ':root']]
            Action: 'kms:*'
            Resource: '*'
  KMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join ['', [alias/, !Ref ProjectName, -kms]]
      TargetKeyId: !Ref KMSKey
  APILayerService:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectCFNPrefix, 'api-layer.yaml']]
      Parameters:
        ProjectName: !Ref ProjectName
        VPC: !GetAtt VPCStack.Outputs.VpcID
        PrivateSubnetA: !GetAtt VPCStack.Outputs.PrivateSubnetA
        PrivateSubnetB: !GetAtt VPCStack.Outputs.PrivateSubnetB
        AppName: api-layer
        AppPort: !Ref InternalAppPort
        DDBTableName: !Ref ModelDBTableName
        ECSCluster: !Ref Cluster
        ExecutionRoleArn: !GetAtt IAMStack.Outputs.ECSExecutionRole
        TaskRoleArn: !GetAtt IAMStack.Outputs.APILayerTaskRole
        APILayerSG: !GetAtt VPCStack.Outputs.AppSecurityGroup
        LoadBalancerSecurityGroup: !GetAtt VPCStack.Outputs.LoadBalancerSecurityGroup
  CodeExecService:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectCFNPrefix, 'code-executor.yaml']]
      Parameters:
        ProjectName: !Ref ProjectName
        VPC: !GetAtt VPCStack.Outputs.VpcID
        PrivateSubnetA: !GetAtt VPCStack.Outputs.PrivateSubnetA
        PrivateSubnetB: !GetAtt VPCStack.Outputs.PrivateSubnetB
        AppName: code-executor
        AppPort: !Ref InternalAppPort
        KMSKey: !Ref KMSAlias
        ECSCluster: !Ref Cluster
        ExecutionRoleArn: !GetAtt IAMStack.Outputs.ECSExecutionRole
        TaskRoleArn: !GetAtt IAMStack.Outputs.CodeExecTaskRole
        AppSG: !GetAtt VPCStack.Outputs.AppSecurityGroup
        LoadBalancerSecurityGroup: !GetAtt VPCStack.Outputs.LoadBalancerSecurityGroup
  CodeScanService:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectCFNPrefix, 'code-scanner.yaml']]
      Parameters:
        ProjectName: !Ref ProjectName
        VPC: !GetAtt VPCStack.Outputs.VpcID
        PrivateSubnetA: !GetAtt VPCStack.Outputs.PrivateSubnetA
        PrivateSubnetB: !GetAtt VPCStack.Outputs.PrivateSubnetB
        AppName: code-scanner
        AppPort: !Ref InternalAppPort
        ECSCluster: !Ref Cluster
        ExecutionRoleArn: !GetAtt IAMStack.Outputs.ECSExecutionRole
        TaskRoleArn: !GetAtt IAMStack.Outputs.CodeScanTaskRole
        AppSG: !GetAtt VPCStack.Outputs.AppSecurityGroup
        LoadBalancerSecurityGroup: !GetAtt VPCStack.Outputs.LoadBalancerSecurityGroup
  TaskStore:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectCFNPrefix, 'aoss-store.yaml']]
      Parameters:
        ProjectName: !Ref ProjectName
        VPC: !GetAtt VPCStack.Outputs.VpcID
        PrivateSubnetA: !GetAtt VPCStack.Outputs.PrivateSubnetA
        PrivateSubnetB: !GetAtt VPCStack.Outputs.PrivateSubnetB
        AppName: task-store
        TaskRoleArn: !GetAtt IAMStack.Outputs.TaskStoreTaskRole
        StoreSG: !GetAtt VPCStack.Outputs.VPCESecurityGroup
  TaskStoreService:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectCFNPrefix, 'task-store.yaml']]
      Parameters:
        ProjectName: !Ref ProjectName
        VPC: !GetAtt VPCStack.Outputs.VpcID
        PrivateSubnetA: !GetAtt VPCStack.Outputs.PrivateSubnetA
        PrivateSubnetB: !GetAtt VPCStack.Outputs.PrivateSubnetB
        AppName: task-store
        AppPort: !Ref InternalAppPort
        ECSCluster: !Ref Cluster
        ExecutionRoleArn: !GetAtt IAMStack.Outputs.ECSExecutionRole
        TaskRoleArn: !GetAtt IAMStack.Outputs.TaskStoreTaskRole
        AppSG: !GetAtt VPCStack.Outputs.AppSecurityGroup
        LoadBalancerSecurityGroup: !GetAtt VPCStack.Outputs.LoadBalancerSecurityGroup
        StoreEndpoint: !GetAtt TaskStore.Outputs.StoreEndpoint
  ControllerService:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectCFNPrefix, 'controller.yaml']]
      Parameters:
        ProjectName: !Ref ProjectName
        VPC: !GetAtt VPCStack.Outputs.VpcID
        PrivateSubnetA: !GetAtt VPCStack.Outputs.PrivateSubnetA
        PrivateSubnetB: !GetAtt VPCStack.Outputs.PrivateSubnetB
        AppName: controller
        AppPort: !Ref InternalAppPort
        ECSCluster: !Ref Cluster
        ExecutionRoleArn: !GetAtt IAMStack.Outputs.ECSExecutionRole
        TaskRoleArn: !GetAtt IAMStack.Outputs.ControllerTaskRole
        AppSG: !GetAtt VPCStack.Outputs.AppSecurityGroup
        LoadBalancerSecurityGroup: !GetAtt VPCStack.Outputs.LoadBalancerSecurityGroup
        ModelDBTableName: !Ref ModelDBTableName
        PromptStoreTableName: !Ref PromptStoreTableName
        KMSKey: !Ref KMSAlias
        APILayerDNS: !GetAtt APILayerService.Outputs.ALBDNSName
        APILayerPort: !Ref InternalAppPort
        CodeExecDNS: !GetAtt CodeExecService.Outputs.ALBDNSName
        CodeExecPort: !Ref InternalAppPort
        CodeScanDNS: !GetAtt CodeScanService.Outputs.ALBDNSName
        CodeScanPort: !Ref InternalAppPort
        TaskStoreDNS: !GetAtt TaskStoreService.Outputs.ALBDNSName
        TaskStorePort: !Ref InternalAppPort
        ConvBucket: !Ref ProjectBucket
        ConvPrefix: !Ref ProjectConvPrefix
  WebUIService:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Join ['', ['https://', !Ref ProjectBucket, '.s3.', !Ref AWS::Region, '.amazonaws.com/', !Ref ProjectCFNPrefix, 'web-ui.yaml']]
      Parameters:
        ProjectName: !Ref ProjectName
        VPC: !GetAtt VPCStack.Outputs.VpcID
        PublicSubnetA: !GetAtt VPCStack.Outputs.PublicSubnetA
        PublicSubnetB: !GetAtt VPCStack.Outputs.PublicSubnetB
        PrivateSubnetA: !GetAtt VPCStack.Outputs.PrivateSubnetA
        PrivateSubnetB: !GetAtt VPCStack.Outputs.PrivateSubnetB
        AppName: web-ui
        AppPort: !Ref InternalAppPort
        ECSCluster: !Ref Cluster
        ExecutionRoleArn: !GetAtt IAMStack.Outputs.ECSExecutionRole
        TaskRoleArn: !GetAtt IAMStack.Outputs.WebUITaskRole
        AppSG: !GetAtt VPCStack.Outputs.WebUISecurityGroup
        LoadBalancerSecurityGroup: !GetAtt VPCStack.Outputs.WebUILoadBalancerSecurityGroup
        ModelDBTableName: !Ref ModelDBTableName
        ProjectBucket: !Ref ProjectBucket
        ProjectFeedbackPrefix: !Ref ProjectFeedbackPrefix
        ALBPort: !Ref ALBPort
        ControllerDNS: !GetAtt ControllerService.Outputs.ALBDNSName
        ControllerPort: !Ref InternalAppPort
        Certificate: !Ref Certificate
Outputs:
  APILayerDNSName:
    Value: !GetAtt APILayerService.Outputs.ALBDNSName
  CodeExecDNSName:
    Value: !GetAtt CodeExecService.Outputs.ALBDNSName
  CodeScanDNSName:
    Value: !GetAtt CodeScanService.Outputs.ALBDNSName
  TaskStoreDNSName:
    Value: !GetAtt TaskStoreService.Outputs.ALBDNSName
  ControllerDNSName:
    Value: !GetAtt ControllerService.Outputs.ALBDNSName
  WebUIDNSName:
    Value: !GetAtt WebUIService.Outputs.ALBDNSName