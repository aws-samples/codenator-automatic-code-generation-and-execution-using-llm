AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates the infrastructure VPC required to deploy Gen AI chat agent
Parameters:
  ProjectName:
    AllowedPattern: '[A-Za-z0-9-]{1,16}'
    ConstraintDescription: >-
      Maximum of 22 alphanumeric characters. Can include hyphens (-), but not
      spaces. Must be unique within your account in an AWS Region.
    Description: Project Name used to identify your resources
    MaxLength: '16'
    MinLength: '1'
    Type: String
    Default: codenator
  VpcCIDR:
    Type: String
    Default: 10.2.0.0/16
  PublicSubnetCIDRA:
    Type: String
    Default: 10.2.0.0/24
  PrivateSubnetCIDRA:
    Type: String
    Default: 10.2.1.0/24
  PublicSubnetCIDRB:
    Type: String
    Default: 10.2.2.0/24
  PrivateSubnetCIDRB:
    Type: String
    Default: 10.2.3.0/24
  AppSourceIP:
    Type: String
    Default: 0.0.0.0/0
  AppPort:
    Type: String
    Default: 8080
  ALBPort:
    Type: String
    Default: 443
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc'
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PublicSubnetCIDRA
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}a'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-a'
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PublicSubnetCIDRB
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}b'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-b'
  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PrivateSubnetCIDRA
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}a'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-a'
  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PrivateSubnetCIDRB
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}b'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-b'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  ElasticIPAddress:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: VPC
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-NAT'
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PublicSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  AppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ProjectName, AppSG]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
  APILayerSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: 
      - AppSG
    Properties:
      GroupId: !Ref AppSG
      IpProtocol: tcp
      FromPort: !Ref AppPort
      ToPort: !Ref AppPort
      SourceSecurityGroupId: !Ref AppSG
  WebUIAppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ProjectName, AppSG]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !Ref WebUILoadBalancerSecurityGroup
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ProjectName, LoadBalancerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          CidrIp: !Ref VpcCIDR
  WebUILoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ProjectName, LoadBalancerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ALBPort
          ToPort: !Ref ALBPort
          CidrIp: !Ref AppSourceIP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AppSourceIP
  VPCESecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ProjectName, VPCESecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref AppSG

Outputs:
  VpcID:
    Value: !Ref VPC
  PublicSubnetA:
    Value: !Ref PublicSubnetA
  PrivateSubnetA:
    Value: !Ref PrivateSubnetA
  PublicSubnetB:
    Value: !Ref PublicSubnetB
  PrivateSubnetB:
    Value: !Ref PrivateSubnetB
  AppSecurityGroup:
    Value: !Ref AppSG
  WebUISecurityGroup:
    Value: !Ref WebUIAppSG
  LoadBalancerSecurityGroup:
    Value: !Ref LoadBalancerSecurityGroup
  WebUILoadBalancerSecurityGroup:
    Value: !Ref WebUILoadBalancerSecurityGroup
  VPCESecurityGroup:
    Value: !Ref VPCESecurityGroup